[BASE]
# User specific constants (might be overwritten by environmental variables).
COUNTRY = GERMANY 
TAX_YEAR = 2024
# Missing prices are set as 0 in the database.
# Always refetching zeroes only slows down the evaluation, but at some time,
# it might be a good idea, to try to refetch missing prices.
# If you calculated the mean before, this has no effect.
REFETCH_MISSING_PRICES = False
# If the price for a coin is missing, check if there are known prices before
# and after the specific transaction and use linear regression to estimate
# the price inbetween.
# Important: The code must be run twice for this option to take effect.
MEAN_MISSING_PRICES = False
# Calculate the (taxed) gains, if the left over coins would be sold at taxation
# deadline (end of the year). If the evaluated TAX_YEAR is ongoing, this will
# fetch the current prices at runtime and therefore slow down repetitive runs.
CALCULATE_UNREALIZED_GAINS = True
# Evaluate taxes for each depot/platform separately. This may reduce your
# taxable gains. Make sure, that this method is accepted by your tax
# authority.
MULTI_DEPOT = True
# Set logging level
# DEBUG, INFO, WARNING, ERROR, FATAL
LOG_LEVEL = DEBUG
# Taxation of Airdrops is currently only partly implemented (#115).
# If True, all airdrops will be taxed as `Schenkung`.
# If False, all airdrops will be taxed as `Einkünfte aus sonstigen Leistungen`.
# Setting this config falsly will result in a wrong tax calculation.
# Please inform yourself and help to resolve this issue by working on/with #115.
# Some airdrops can be classified as gifts (Schenkung) or income (Einkünfte)
# relatively savely. For those, there is a flag to signal either type.
# See the AirdropGift and AirdropIncome classes in transaction.py and their usage in book.py
ALL_AIRDROPS_ARE_GIFTS = True
